{
  "name": "Getting Started Using the EIA's Web API",
  "tagline": "A How-To Guide for Accessing the Open Data Share by the U.S. Energy Information Administration",
  "body": "### Purpose\r\nThis guide will show you how to get started using the [web API](http://eia.gov/opendata) provided by the [U.S. Energy Information Administration](http://eia.gov) to access interesting data and statistics.  This API provides access to all kinds of interesting data related to energy usage in the U.S.  For example, you can access data on electricity consumption and pricing, use of natural resources like oil, coal and natural gas, and the energy outlook on both a short and long-term basis you can even get hourly updates on the day-ahead demand forecast for electricity usage.  Much of this data is available on a regional level or nationwide.  There is even a large set of data related to international energy usage. \r\n\r\nThere is so much data available and types of queries you can make that it may seem overwhelming.  To narrow the scope down a bit for the purpose of showing you how to use this huge database and get what you want out of it, we'll be focusing specifically on nuclear power generation in the U.S.  \r\n\r\n### Obtaining an API Key\r\nGetting an API key is the first step to interacting with the EIA database.  Don't worry, it's free!  You will include this key in the URL query string when making requests to the site.  To get your key, first you need to go register at the EIA website.  The purpose of this registering and getting the key is so that the EIA can notify you of any changes to the API.  They don't state it on their website, but they might also use it to throttle your usage in case you are making an excessive number of requests.\r\n\r\nSo [go here now](http://eia.gov/opendata/register.cfm) to get registered and receive your key!  Here is what the registration form looks like:\r\n\r\n![registration](https://timothythomas.github.io/images/register.png)\r\n\r\nEnter your e-mail, agree to the terms and click \"register.\"  Then check your e-mail and you should have received something like this:\r\n\r\n![API Key E-mail](https://timothythomas.github.io/images/api_key.png)\r\n\r\nThat long alpha-numeric string (I've partially blacked out a portion of mine) is your API key.\r\n\r\n### API Documentation\r\n\r\nThe EIA's [API documentation](http://eia.gov/opendata/commands.cfm) does not provide a great description of the different types of queries that can be made.  If you visit the documentation page you will see terms like \"Series Query\", \"Geoset Query\" and \"Relation Query\" accompanied with a lot of technical jargon.  **We are going to ignore all of this for now.**  For someone just getting started, I would recommend a different approach.  \r\n\r\nThe important thing to know for now is that most of the queries that are performed return a time series of data.  Think of a two-column table with the first column being a series of dates and the next column being the value we are interested in.  For example, we could request the yearly percentage of electricity generation that comes from nuclear power plants.\r\n\r\n### Your First API Call:  Making a GET request\r\n\r\nBut before we jump straight into getting some real data, let's first try a simple API call to see how it works.  So how do we do that?\r\n\r\nFortunately, the EIA provides a neat tool called the API Browser.  Go to the [API Browser page](http://eia.gov/opendata/qb.cfm).  Here you will see a list of the different data sets available.  \r\n\r\n![API Browser](https://timothythomas.github.io/images/api_browser.png)\r\n\r\nThink of this like the top level in a big data hierarchy.  Each of the \"children categories\" is a link to a group of related data.  This is the best way to navigate the API and find what you're looking for.  The coolest part is that it shows you right on the page how to make the API call to what you're currently looking at.  So let's do that.  Let's make a call to this page and see if we can receive a JSON object giving us each of these top-level categories.  Write and execute the following javascript code in your web browser or a tool like [JSFiddle](https://jsfiddle.net/).  We're just going to output stuff to the console; so open the console on your browser to see the response.  Remember to replace my api_key with yours!  \r\n\r\n```javascript\r\nvar req = new XMLHttpRequest();\r\nvar api_key = \"api_key=45AF21865123456789FD6F039FC9AB94\";\r\nvar url = \"http://api.eia.gov/category/?\";\r\nvar query = \"&category_id=371\";\r\n\r\nreq.open(\"GET\", url + api_key + query, true);\r\nreq.addEventListener('load', function(){\r\n    var response = JSON.parse(req.responseText);\r\n    console.log(response);\r\n});\r\nreq.send(null);\r\n```\r\n\r\nIf we run the above code and examine the output in the console, we can see that we received a JSON object with the name \"EIA Data Sets\" and that there is an object corresponding to each of the children categories.\r\n\r\n![Category Response](https://timothythomas.github.io/images/cat_resp.png)\r\n\r\nOk, that was a good first example.  In the next few API calls, we'll mainly just be changing these two lines of the previous code block to match the query string for the data we're trying to access:\r\n\r\n```javascript\r\nvar url = \"http://api.eia.gov/category/?\";\r\nvar query = \"&category_id=371\";\r\n```\r\n\r\n### Getting Some Real Data\r\n\r\nSo let's walk through how we might request how much of the nation's electricity production came from nuclear power plants.  We're going to use the API browser again, but this time drill way down through several categories and sub-categories.  Navigate to the following path using the category links in the API browser:  `EIA Data Sets > Total Energy > Nuclear Energy > Nuclear Energy Overview`.  Here is what you should see:\r\n\r\n![Nuclear Energy Overview](https://timothythomas.github.io/images/nuke_nrg_over.png)\r\n\r\nAt this point we've drilled down several categories, but have not yet reached any data.  The API browser conveniently provides us with another API call URL that will access the data on this page; but like the previous example, this would only give us the list of objects shown on this page.  However, each of these links is actual data.  How do I know that?  Because the bullet list is denoted \"Child Series\", whereas on previous pages we were looking at list of \"Children Categories\".  That is how you know whether you are looking at another sub-category or actual data.  So click the link to \"Nuclear Share of Electricity Net Generation, Annual (Percent)\" and you will be taken to the following page:\r\n\r\n![Nuclear Energy Overview](https://timothythomas.github.io/images/nuke_share.png)\r\n\r\nExcellent!  Exactly what we wanted.  We can see on this page a nice plot showing the percentage of U.S. electricity that came from nuclear power on an annual basis.  Now to get this data using the API, all we have to do is use the query string given to us on this page.  Let's modify our code and see if we can get a JSON object containing this data.  All we have to do is change our query variable, right?\r\n\r\n```javascript\r\nvar query = \"&series_id=TOTAL.NUETSUS.A\";\r\n```\r\n\r\nOops!  That didn't work.  Can you figure out why?  We have to change our URL as well since we are now querying a series instead of categories.  So let's create a new variable called `type` that we can change depending on which the kind of data we are requesting.  Here's what the entire request code looks like:\r\n\r\n```javascript\r\nvar req = new XMLHttpRequest();\r\nvar url = \"http://api.eia.gov/\";\r\nvar type = \"series/?\";\r\nvar api_key = \"api_key=45AF218653356B8673FD6F039FC9AB94\";\r\nvar query = \"&series_id=TOTAL.NUETSUS.A\";\r\nreq.open(\"GET\", url + type + api_key + query, true);\r\nreq.addEventListener('load', function() {\r\n    var response = JSON.parse(req.responseText);\r\n    console.log(response);\r\n});\r\nreq.send(null);\r\n```\r\n\r\nExamining the output in the console, we see that nested in the response object is an array of data containing the same values as shown on the API browser page.  \r\n\r\n![Nuclear Energy Overview](https://timothythomas.github.io/images/nuke_share_output.png)\r\n\r\nThere is an array of objects each containing a year and a percentage value (e.g. 2013 and 19.4).  The value is the percentage of electricity that came from nuclear power.\r\n\r\n### Embedding a Visualization\r\n\r\nNow that you are able to access the data and have it in a nice JSON object, you can use it however you need in your application, website, whatever.  But, another really handy feature provided by the API is the ability to embed the visualization of this data directly into your own webpage.  On the API Browser page for this data set, click the link where it says \"show me how to embed a chart of this series\" (highlighted in screenshot below):\r\n\r\n![Nuclear Energy Overview](https://timothythomas.github.io/images/chart_embed.png)\r\n\r\nThis takes you to the following page:\r\n\r\n![Nuclear Energy Overview](https://timothythomas.github.io/images/html_embed.png)\r\n\r\nThe EIA has really done a nice job of making it easy to embed visualizations of their data.  Simply copy the provided text directly into an html document and you can have your own webpage containing this visualization.  An the <iframe> tag in HTML simply links to another HTML document.  In this case, the EIA has done all the hard work of converting the data into an html visualization and we can simply add the widget to our webpage.  Here is some HTML code to demonstrate.  Simply copy this to a file and open it in a browser.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>EIA API HowTo</title>\r\n  </head>\r\n  <body>\r\n\t<h1>Example of Embedding a Chart</h1>\r\n        <iframe id=\"eia_widget\" style=\"width:100%;height:500px\"\r\n        src=\"http://eia.gov/opendata/embed/iframe.php?series_id=TOTAL.NUETSUS.A\"\r\n        load=\"iframe_load\"></iframe>\r\n  </body>\r\n</html>\r\n```\r\n\r\nOne potential gotcha to look out for is to make sure you add \"http:\" at the beginning of the URL within the iframe.  You'll notice I had to manually insert it in the code above since.  Without that, a browser would not be able to locate the file.  So this is what the output should look like if you open the above html document in a browser.\r\n\r\n![Nuclear Energy Overview](https://timothythomas.github.io/images/embed_output.png)\r\n\r\nOne neat thing about these visualizations is that every time the page is loaded, they will be refreshed with the most up to date data.  So as long as the URL in the embedded iframe does not change, you can be sure your site is always showing the most up to date visualization.\r\n\r\n### Making POST Request\r\n\r\nYou can make most of your API calls using just GET requests.  However, there's at least one case where it's important to also know how to make a POST request.  This is very briefly described in the API documentation.  Here is what it says:\r\n\r\n> The list semicolon separated (';') list of series IDs for up to 100 series. It is recommended to use the POST protocol to transmit the series_id field if more than 10 series are requested in the single call\r\n\r\nThe above tells us two things:\r\n\r\n1. You can request more than 1 series in a single request by simply separating the values in the series_id field with semicolons.\r\n\r\n2. If you are requesting more than 10 series in a single call, you should use the POST protocol.\r\n\r\nBut the documentation doesn't tell you how to perform a POST request.  After some fiddling, I found the following approach works well.  \r\n\r\n```javascript\r\nvar req = new XMLHttpRequest();                                               \r\nvar url = \"http://api.eia.gov/\";                                              \r\nvar type = \"series/?\";                                                        \r\nvar api_key = \"api_key=45AF218653356B8673FD6F039FC9AB94\";                     \r\nvar query = \"&series_id=TOTAL.NUETSUS.A;ELEC.GEN.NUC-VA-99.A\";                \r\nreq.open(\"POST\", url + type + api_key, true);                                 \r\nreq.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");    \r\nreq.addEventListener('load', function(){                                      \r\n    var response = JSON.parse(req.responseText);                              \r\n    console.log(response)                                                     \r\n});                                                                           \r\nreq.send(query);                                                              \r\n```\r\n\r\nLet's talk about the differences between the above POST request and our previous GET request.  First, you'll notice the `query` variable includes two series separated by a semi-colon.  The first is the same series as before (% share of nuclear power nationwide).  The second is the total electricity (in gigawatt-hours) generated by nuclear power plants in the state where I live (Virginia).  If you wanted to request several more data series, just append them to this string with semi-colon separation.\r\n\r\nThe next difference to notice is that we are now passing the \"POST\" parameter instead of \"GET\" when we open our request.  However, the URL we pass that includes the query type and our api_key is basically the same, except we have dropped the query string from the URL.  Since in a POST request we pass information in the body of the request, we need to specify the type of content.  That is handled by this line:\r\n\r\n```javascript\r\nreq.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");  \r\n```\r\n\r\nThis communicates to the server that the request body will be in the form of a url-encoded string.  In other words, the actual query will be in the exact same format as our GET request, only now it is in the body of the request.  Finally,\r\ninstead of sending `null` we send our query string:\r\n\r\n```javascript\r\nreq.send(query);                                                              \r\n```\r\n\r\nIf we run the code, here is what the output looks like in the console:\r\n\r\n![Nuclear Energy Overview](https://timothythomas.github.io/images/post.png)\r\n\r\nNotice this time that we received two objects in the response object.  The first object is the same as our previous GET request with name: \"Nuclear Share of Electricity Net Generation, Annual\" containing an array of 59 data points and the second object is the new series \"Net generation : nuclear : Virginia : all sectors : annual\" with 15 data points corresponding to the years 2001 to 2015.  So it worked!\r\n\r\n### Conclusion\r\n\r\nYou now have all the basic tools you need to navigate and make use of the Energy Information Administrations open data API.  Simply explore the API Browser for the data you want, use the API call URL shown on the data series page and then use the data embedded in the JSON object however you need to.  If you simply want to add a visualization to a webpage, consider first using the embedded visualization widgets provided by the EIA.   \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}